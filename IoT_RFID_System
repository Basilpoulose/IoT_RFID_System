#include <WiFi.h>
#include "Adafruit_Sensor.h"
#include <ArduinoJson.h>
#include <PubSubClient.h>
#include <WiFiClientSecure.h>
#include "Adafruit_Sensor.h"
#include <HX711.h>
#include "DHT.h"
#include <SPI.h>
#include <MFRC522.h>
#include <Wire.h>
//sck - 18 , miso - 19 , mosi - 23 , 
#define SS_PIN 5
#define RST_PIN 0
MFRC522 mfrc522(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;

#define DHTPIN 27  // Set DHT pin as GPIO2
#define DHTTYPE DHT11  // Define the type of DHT sensor
DHT dht(DHTPIN, DHTTYPE); // initlization
// gas sensor pin 
const int mq135Pin = 34;   // Analog pin where MQ-135 is connected

const int LOADCELL_DOUT_PIN = 16;
const int LOADCELL_SCK_PIN = 4;
 
int baseBlock = 2; // Starting block number 
byte readbackblock[18];

//wifi details
const char* ssid = "####; //
const char* password = "###";


// Define your product ID and weight
const char* productID = "1325"; //  product ID
float weight = 00.0; //  weight measurement

//float co2 = 400.0; //  CO2 reading
float temperature = 00.0 ; // Get temperature in Celsius
float humidity = 00.0; // Get humidity


HX711 scale;  // Initializes library functions.
int calibration_factor = 114332; // Defines calibration factor we'll use for calibrating.

float R0 = 12.32;    // Base resistance at 100 ppm NH3 in clean air (adjust through calibration)
float RL = 20;      // Load resistance in kilo-ohms (20kÎ©)
float CO2Curve[3] = {2.602, 0.295, -0.46}; // CO2 curve based on MQ-135 datasheet

float calculateResistance(int analogValue) {
  // Calculate the sensor resistance (RS) based on the analog value
  return ((1023.0 * RL) / analogValue) - RL;
}

float calculatePPM(float RS) {
  // Calculate the PPM using the sensor's resistance and the CO2 curve
  float ratio = RS / R0;
  float ppm = pow(10, (log10(ratio) - CO2Curve[1]) / CO2Curve[2] + CO2Curve[0]);
  return ppm;
}
int analogValue = analogRead(mq135Pin); // Read analog value from MQ-135
float RS = calculateResistance(analogValue); // Calculate resistance of the sensor
float ppm = calculatePPM(RS); // Calculate CO2 concentration in PPM

// MQTT broker details
const char* mqtt_server = "1c877858c6264a73b151d1eb58ff0e6f.s1.eu.hivemq.cloud"; // chnage this to your cluster url of broker(hivemq)
const char* mqtt_username = "gas_sensor_weight"; // change to your username in hivemq
const char* mqtt_password = "Gas_sensor_weight@123"; // change to your pwd in hivemq
const int mqtt_port = 8883;
/**** Secure WiFi Connectivity Initialization *****/
WiFiClientSecure espClient;

/**** MQTT Client Initialization Using WiFi Connection *****/
PubSubClient client(espClient);

unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE (50)
char msg[MSG_BUFFER_SIZE];

/****** Root certificate *********/
static const char *root_ca PROGMEM = R"EOF(
-----BEGIN CERTIFICATE-----

-----END CERTIFICATE-----
)EOF";

/************* Connect to WiFi ***********/
void setup_wifi() {
  delay(10);
  Serial.print("\nConnecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  randomSeed(micros());
  Serial.println("\nWiFi connected\nIP address: ");
  Serial.println(WiFi.localIP());
}

/************* Connect to MQTT Broker ***********/
void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    String clientId = "ESP32Client-";   // Create a random client ID
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str(), mqtt_username, mqtt_password)) {
      Serial.println("connected");

      client.subscribe("weighing_scale");   // Subscribe to topics here

    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");   // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

/***** Callback Method for Receiving MQTT Messages and Switching LED ****/
void callback(char* topic, byte* payload, unsigned int length) {
  String incomingMessage = "";
  for (int i = 0; i < length; i++) incomingMessage += (char)payload[i];

  Serial.println("Message arrived [" + String(topic) + "] " + incomingMessage);
}

void publishMessage(const char* topic, String payload, boolean retained) {
  if (client.publish(topic, payload.c_str(), retained))
    Serial.println("Message published [" + String(topic) + "]: " + payload);
}

void setup() 
{
  Serial.begin(115200);   // Starts serial communication in 9600 baud rate.
  delay(10);
  setup_wifi();
  espClient.setCACert(root_ca);  // Enable this line for secure connection

  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
  
  SPI.begin();
  pinMode(mq135Pin, INPUT);
  mfrc522.PCD_Init();
  dht.begin(); 
  

  for (byte i = 0; i < 6; i++) 
  {
    key.keyByte[i] = 0xFF; // Default key
  }
  Serial.println("Initializing scale calibration.");  // Prints user commands.
  Serial.println("Please remove all weight from scale.");
  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);  // Initializes the scaling process.
  scale.set_scale();
  scale.tare();          // Resets the scale to 0.
}
 

void loop() {
  if (!client.connected()) 
  reconnect();
  client.loop();
  delay(50);
  scale.set_scale(calibration_factor);
  weight = scale.get_units();
  DynamicJsonDocument doc(1024);
  

  if (weight > 0.03) 
  {
    Serial.print("Reading: ");            // Prints weight readings in .2 decimal kg units.
    Serial.print(weight,3);
    Serial.println(" kg");
    delay(200);
    if (!mfrc522.PICC_IsNewCardPresent()) {
      Serial.println("No tag");
      delay(700);
      return;
    }

    if (!mfrc522.PICC_ReadCardSerial()) {
      Serial.println("Failed to read card.");
      return;
    }

    Serial.println("Card detected.");
    
    // Reading temperature, humidity, CO2 from the sensors
    temperature = dht.readTemperature(); // Get temperature in Celsius
    humidity = dht.readHumidity(); // Get humidity

    delay(500);
    readDataBeforeWrite();
    delay(500);

    Serial.println("UID is:");
    printDec(mfrc522.uid.uidByte, mfrc522.uid.size);
    Serial.println();

    // Clear any previous input in the serial buffer
    while (Serial.available()) 
    {
      Serial.read(); // Read and discard
    }
    
    // Prompt for 'in' or 'out' status
    Serial.println("Enter 'i' or 'o':");
    // while (!Serial.available());
    // char status = Serial.read();

    while (true) 
    {
      if (Serial.available()) 
      {
        char status = Serial.read();

        if (status == 'i' || status == 'o') 
        {
          byte blockStatus[16];
          writeRFIDData();
          delay(50);
          snprintf((char*)blockStatus, sizeof(blockStatus), "Status: %c", status);
          blockStatus[15] = '\0';

          if (writeBlock(baseBlock + 8, blockStatus) == 0) 
          {
            Serial.println("Status written successfully");
          }
          break; // Exit the loop after processing valid input
        } 
        else 
        {
          Serial.println("Invalid input. Please enter 'i' or 'o':");
        }
      }
    }
    readDataAfterWrite();
    Serial.println("UID is:");
    printDec(mfrc522.uid.uidByte, mfrc522.uid.size);
    Serial.println();
    String tagUID = "";
    for (byte i = 0; i < mfrc522.uid.size; i++) 
    {
      tagUID += String(mfrc522.uid.uidByte[i]); // Read UID as hex
    }
    tagUID.toUpperCase();

    String weightStr = String(weight, 3);
    doc["Content"] = "Data"; 
    doc["Weight"] = weightStr;
    doc["humidity"] = humidity;
    doc["temperature"] = temperature;
    doc["CO2"] = ppm;
    doc["Product ID"] = productID;
    doc["Card ID"] = tagUID;

   char mqtt_message[256];
   serializeJson(doc, mqtt_message);
   delay(100);
   publishMessage("Gas level,Weight,Temp & Hum,Prduct ID, TagID", mqtt_message, true);
  }
  else 
  {
    // Print weight if it does not exceed the threshold
    // Serial.print("Reading: ");
    // Serial.print(weight, 3);
    // Serial.println(" kg");
    // Serial.print(ppm);
    // Serial.println(" PPM");
  }
  delay(200);
  mfrc522.PICC_HaltA(); // Halt the current card
  mfrc522.PCD_StopCrypto1(); // Stop encryption on the reader
  delay(500);
  // Puts the scale to sleep mode for 5 seconds
  scale.power_down();
  delay(500);
  scale.power_up();
  delay(2000);
}


void writeRFIDData() 
{
  byte blockTemp[16];
  byte blockHum[16];
  byte blockWeight[16];
  byte blockCO2[16];
  byte blockProductID[16];

        // Prepare temperature data (Block n) block 2 
  snprintf((char*)blockTemp, sizeof(blockTemp), "Temp: %.2f", temperature);
  blockTemp[15] = '\0';

        // Prepare humidity data (Block n+1)
  snprintf((char*)blockHum, sizeof(blockHum), "Hum: %.2f", humidity);
  blockHum[15] = '\0';

        // Prepare weight data (Block n+2)
  snprintf((char*)blockWeight, sizeof(blockWeight), "Weight: %.3f", weight);
  blockWeight[15] = '\0';

        // Prepare CO2 data (Block n+3)
  snprintf((char*)blockCO2, sizeof(blockCO2), "CO2: %.2f", ppm);
  blockCO2[15] = '\0';

        // Prepare product ID data (Block n+4)
  snprintf((char*)blockProductID, sizeof(blockProductID), "ID: %s", productID);
  blockProductID[15] = '\0';

        // Write each piece of data to its own block
  if (writeBlock(baseBlock, blockTemp) == 0) 
  {
    Serial.println("Temperature written successfully");
  } 
  else 
  {
    Serial.println("Failed to write Temperature");
  }

  if (writeBlock(baseBlock + 2, blockHum) == 0) 
  {
    Serial.println("Humidity written successfully");
  }
  else 
  {
    Serial.println("Failed to write Humidity");
  }

  if (writeBlock(baseBlock + 4, blockWeight) == 0) 
  {
    Serial.println("Weight written successfully");
  } 
  else 
  {
    Serial.println("Failed to write Weight");
  }

  if (writeBlock(baseBlock + 6, blockCO2) == 0) 
  {
    Serial.println("CO2 written successfully");
  } 
  else 
  {
    Serial.println("Failed to write CO2");
  }

  if (writeBlock(baseBlock + 8, blockProductID) == 0) 
  {
    Serial.println("Product ID written successfully");
  }
  else 
  {
    Serial.println("Failed to write Product ID");
  }

}
// to print uid of tag in decimal format
void printDec(byte *buffer, byte bufferSize) {
  for (byte i = 0; i < bufferSize; i++) {
    Serial.print(' ');
    Serial.print(buffer[i], DEC);
  }
}

// Function to read existing data before writing new data
void readDataBeforeWrite() {
    Serial.println("Reading existing data before writing...");
    for (int i = 0; i < 5; i++) {
        if (readBlock(baseBlock + (i * 2), readbackblock) == 0) {
            readbackblock[15] = '\0'; 
            Serial.print(": ");
            Serial.println((char*)readbackblock);
        } else {
            Serial.print("Failed to read Block ");
            Serial.println(baseBlock + (i * 2));
        }
    }
}

// Function to read data after writing
void readDataAfterWrite() {
    Serial.println("Reading data after writing...");
    for (int i = 0; i < 5; i++) {
        if (readBlock(baseBlock + (i * 2), readbackblock) == 0) {
            readbackblock[15] = '\0'; 
            Serial.print(": ");
            Serial.println((char*)readbackblock);
        } else {
            Serial.print("Failed to read Block ");
            Serial.println(baseBlock + (i * 2));
        }
    }
}

// Function to write to a block
int writeBlock(int blockNumber, byte arrayAddress[]) {
    // Check for valid block number
    if (blockNumber < 0 || blockNumber > 15) {
        Serial.println("Invalid block number");
        return -1;
    }

    int trailerBlock = (blockNumber / 4) * 4 + 3;
    if (blockNumber > 2 && (blockNumber + 1) % 4 == 0) {
        Serial.print(blockNumber);
        Serial.println(" is a trailer block.");
        return -1;
    }

    Serial.print(blockNumber);
    Serial.println(" is a data block:");

    // Authentication
    MFRC522::StatusCode status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
    if (status != MFRC522::STATUS_OK) {
        Serial.print("PCD_Authenticate() failed: ");
        Serial.println(mfrc522.GetStatusCodeName(status));
        return -1;
    }

    // Writing the block
    status = (MFRC522::StatusCode)mfrc522.MIFARE_Write(blockNumber, arrayAddress, 16);
    if (status != MFRC522::STATUS_OK) {
        Serial.print("MIFARE_Write() failed: ");
        Serial.println(mfrc522.GetStatusCodeName(status));
        return -1;
    }

    return 0;
}

// Function to read from a block
int readBlock(int blockNumber, byte arrayAddress[]) {
    // Check for valid block number
    if (blockNumber < 0 || blockNumber > 15) {
        Serial.println("Invalid block number");
        return -1;
    }

    int trailerBlock = (blockNumber / 4) * 4 + 3;

    // Authentication
    MFRC522::StatusCode status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
    if (status != MFRC522::STATUS_OK) {
        Serial.print("PCD_Authenticate() failed (read): ");
        Serial.println(mfrc522.GetStatusCodeName(status));
        return -1;
    }

    // Reading a block
    byte buffersize = 18;
    status = mfrc522.MIFARE_Read(blockNumber, arrayAddress, &buffersize);
    if (status != MFRC522::STATUS_OK) {
        Serial.print("MIFARE_Read() failed: ");
        Serial.println(mfrc522.GetStatusCodeName(status));
        return -1;
    }

    return 0;
}

